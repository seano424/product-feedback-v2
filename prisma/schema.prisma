generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?
  user               User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String       @id @default(cuid())
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  email         String?      @unique
  password      String?
  username      String?      @unique
  image         String?
  emailVerified DateTime?
  name          String?
  accounts      Account[]
  comments      Comment[]
  sessions      Session[]
  suggestions   Suggestion[]
  votes         Vote[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Suggestion {
  id          Int       @id @default(autoincrement())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  title       String    @unique
  description String
  userId      String
  categoryId  Int
  statusType  String
  category    Category  @relation(fields: [categoryId], references: [id])
  status      Status    @relation(fields: [statusType], references: [type])
  user        User      @relation(fields: [userId], references: [id])
  comments    Comment[]
  votes       Vote[]
}

model Comment {
  id           Int        @id @default(autoincrement())
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  body         String
  userId       String
  suggestionId Int
  suggestion   Suggestion @relation(fields: [suggestionId], references: [id])
  user         User       @relation(fields: [userId], references: [id])
}

model Category {
  id           Int          @id @default(autoincrement())
  name         String       @unique
  suggestionId Int?
  type         String
  suggestions  Suggestion[]
}

model Status {
  type        String       @unique
  name        String       @unique
  suggestions Suggestion[]
}

model Vote {
  id           String     @id @default(cuid())
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  user         User       @relation(fields: [userId], references: [id])
  userId       String
  suggestion   Suggestion @relation(fields: [suggestionId], references: [id])
  suggestionId Int
}
